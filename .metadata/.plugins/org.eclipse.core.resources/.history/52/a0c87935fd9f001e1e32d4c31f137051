package com.cilazatta.vollMed.services;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cilazatta.vollMed.dto.AgendamentoDeConsultaDTO;
import com.cilazatta.vollMed.dto.ResponseAgendaDoMedicoDTO;
import com.cilazatta.vollMed.dto.ResponseConsultaDTO;
import com.cilazatta.vollMed.dto.mapper.AgendamentoDeConsultasMapper;
import com.cilazatta.vollMed.entities.AgendamentoDeConsultas;
import com.cilazatta.vollMed.entities.CadastroDeMedicos;
import com.cilazatta.vollMed.entities.CadastroDePaciente;
import com.cilazatta.vollMed.entities.interfaces.ValidadorAgendamentoDeConsulta;
import com.cilazatta.vollMed.exceptions.RecordNotFoundException;
import com.cilazatta.vollMed.repository.AgendamentoDeConsultaRepository;
import com.cilazatta.vollMed.repository.CadastroDeMedicosRepository;
import com.cilazatta.vollMed.repository.CadastroDePacienteRepository;

@Service
public class AgendamentoDeConsultaService {

	private CadastroDeMedicos medico;
	private CadastroDePaciente paciente;
	
	@Autowired
	private List<ValidadorAgendamentoDeConsulta> validadores;
	
	
	private final CadastroDePacienteRepository pacienteRepo;
	private final CadastroDeMedicosRepository medicoRepo;
	private final AgendamentoDeConsultaRepository agendaRepo;
	private final AgendamentoDeConsultasMapper mapper;

	public AgendamentoDeConsultaService(CadastroDePacienteRepository pacienteRepo,
			CadastroDeMedicosRepository medicoRepo, AgendamentoDeConsultaRepository agendaRepo,
			AgendamentoDeConsultasMapper mapper) {
		this.agendaRepo = agendaRepo;
		this.medicoRepo = medicoRepo;
		this.pacienteRepo = pacienteRepo;
		this.mapper = mapper;
	}

	public ResponseConsultaDTO validarConsulta(AgendamentoDeConsultaDTO dto) {

		for (ValidadorAgendamentoDeConsulta validador : validadores) {
			if(!validador.validar(dto).status()==false) {
				return validador.validar(dto);
			}
		}
		

		this.medico = this.medicoRepo.findById(dto.idMedico()).filter(medico -> medico.getIsInativo() == false).get();

		this.paciente = this.pacienteRepo.findById(dto.idPaciente())
				.filter(paciente -> paciente.getIsInativo() == false).get();


		return this.agendarConsulta(dto);

	}

	public ResponseConsultaDTO agendarConsulta(AgendamentoDeConsultaDTO dto) {
		AgendamentoDeConsultas agenda = new AgendamentoDeConsultas();
		agenda.setPaciente(paciente);
		agenda.setMedico(medico);
		agenda.setDataDoAgendamento(dto.dataDoAgendamento());
		agenda.setDataAgendada(dto.dataDaConsulta());
		agenda.setHoraAgendada(dto.horario());
		try {
			agenda = this.agendaRepo.save(agenda);
			return new ResponseConsultaDTO(true, "Paciente Não Cadastrado", this.mapper.toAgendaDTO(agenda));
		} catch (Exception e) {
			throw new RecordNotFoundException(e.getMessage());
		}
	}
//=================================	

	public List<ResponseAgendaDoMedicoDTO> findByMedico(Long id) {
		CadastroDeMedicos medico = this.medicoRepo.findById(id).get();
		List<ResponseAgendaDoMedicoDTO> meusCompromissos = this.agendaRepo.findByMedico(medico).stream()
				.map(r -> this.mapper.toAgendaDTO(r)).collect(Collectors.toList());
		return meusCompromissos;
	}

	public List<ResponseAgendaDoMedicoDTO> findByMedicoAndData(Long id) {
		CadastroDeMedicos medico = this.medicoRepo.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("Registro Não Encontrado"));
		List<ResponseAgendaDoMedicoDTO> meusCompromissos = this.agendaRepo
				.findByMedicoAndDataAgendadaAfter(medico, LocalDate.now()).stream().map(r -> this.mapper.toAgendaDTO(r))
				.collect(Collectors.toList());
		return meusCompromissos;
	}

}
