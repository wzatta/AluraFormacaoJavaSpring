package com.cilazatta.vollMed.entities;

import com.cilazatta.vollMed.dto.EnderecoDTO;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


@Getter
@Setter
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@ToString
@AllArgsConstructor
@NoArgsConstructor
@Embeddable
public class Endereco {

	@Column(name = "logradouro", nullable = false, length = 50)
	private String logradouro;
	
	@Column(name = "numero", nullable = true, length = 6)
	private String numero;
	
	@Column(name = "complemento", nullable = true, length = 30 )
	private String complemento;
	
	@Column(name = "bairro", nullable = false, length = 50)
	private String bairro;
	
	@Column(name = "cidade", nullable = false, length = 50)
	private String cidade;
	
	@Column(name = "uf", nullable = false, length = 2)
	private String uf;
	
	@Column(name = "cep", nullable = false, length = 10)
	private String cep;

	public Endereco atualizaEndereco(EnderecoDTO endereco) {
		
		if(endereco.logradouro() != null) {
			this.setLogradouro(endereco.logradouro());
		}

		if(endereco.numero() != null) {
			this.setNumero(endereco.numero());
		}

		if(endereco.complemento() != null) {
			System.out.println(this.complemento);
			System.out.println(endereco.complemento());
			this.setComplemento(endereco.complemento());
		}

		if(endereco.bairro() != null) {
			this.setBairro(endereco.bairro());
		}

		if(endereco.cidade() != null) {
			this.setCidade(endereco.cidade());
		}

		if(endereco.uf() != null) {
			this.setUf(endereco.uf());
		}

		if(endereco.cep() != null) {
			this.setCep(endereco.cep());
		}
		
		return this;
		
		
	}
}
