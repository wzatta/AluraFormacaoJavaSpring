package com.cilazatta.vollMed.entities;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;

import com.cilazatta.vollMed.enums.HorariosDeConsultas;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.ForeignKey;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotBlank;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;

@Getter
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@ToString
@Table(uniqueConstraints = {
		@UniqueConstraint(name = "pacienteAgendamento", columnNames = { "paciente", "dataAgendada", "horaAgendada" }),
		@UniqueConstraint(name = "medicoAgendamento", columnNames = { "medico", "dataAgendada", "horaAgendada" }),
		@UniqueConstraint(name = "medicoPaciente", columnNames = { "medico", "paciente", "dataAgendada" }), })

@Entity
public class AgendamentoDeConsultas {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@EqualsAndHashCode.Include
	private Long id;

	@ManyToOne
	@JoinColumn(name = "idpaciente", foreignKey = @ForeignKey(name = "fk_pacienteid"))
	private CadastroDePaciente paciente;

	@ManyToOne
	@JoinColumn(name = "idmedico", foreignKey = @ForeignKey(name = "fk_medicoid"))
	private CadastroDeMedicos medico;

	@Column(name = "datadoagendamento", nullable = false)
	@NotBlank
	private LocalDateTime dataDoAgendamento;

	@Column(name = "dataagendada", nullable = false)
	@NotBlank
	private LocalDate dataAgendada;

	@Column(name = "horaagendada", nullable = false)
	@NotBlank
	private HorariosDeConsultas horaAgendada;

//=====================================================

	public void setId(Long id) {
		this.id = id;
	}

	public void setPaciente(CadastroDePaciente paciente) {
		this.paciente = paciente;
	}

	public void setMedico(CadastroDeMedicos medico) {
		this.medico = medico;
	}

	public void setDataDoAgendamento(LocalDateTime dataDoAgendamento) {
		this.dataDoAgendamento(dataDoAgendamento);
	}

	public void setDataAgendada(LocalDate dataAgendada) {
		this.dataAgendada = dataAgendada;
	}

	public void setHoraAgendada(HorariosDeConsultas horaAgendada) {
		this.horaAgendada = horaAgendada;
	}

	//===============================================================

	public void dataDoAgendamento(LocalDateTime datahora) {
		if (datahora.getDayOfWeek() != DayOfWeek.SUNDAY) {
			if (datahora.getHour() > 7 && datahora.getHour() < 19) {
				this.dataDoAgendamento = datahora;
			}
		}

	}

	private boolean verificarHorarioDeAtendimento() {
		if (LocalDateTime.now().getDayOfWeek() != DayOfWeek.SUNDAY) {
			if (LocalDateTime.now().getHour() > 7 && LocalDateTime.now().getHour() < 19) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

}
