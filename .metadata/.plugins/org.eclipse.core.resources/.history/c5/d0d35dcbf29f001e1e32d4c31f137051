package com.cilazatta.vollMed.services;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.cilazatta.vollMed.dto.AgendamentoDeConsultaDTO;
import com.cilazatta.vollMed.dto.ResponseAgendaDoMedicoDTO;
import com.cilazatta.vollMed.dto.ResponseConsultaDTO;
import com.cilazatta.vollMed.dto.mapper.AgendamentoDeConsultasMapper;
import com.cilazatta.vollMed.entities.AgendamentoDeConsultas;
import com.cilazatta.vollMed.entities.CadastroDeMedicos;
import com.cilazatta.vollMed.entities.CadastroDePaciente;
import com.cilazatta.vollMed.enums.HorariosDeConsultas;
import com.cilazatta.vollMed.exceptions.RecordNotFoundException;
import com.cilazatta.vollMed.repository.AgendamentoDeConsultaRepository;
import com.cilazatta.vollMed.repository.CadastroDeMedicosRepository;
import com.cilazatta.vollMed.repository.CadastroDePacienteRepository;

@Service
public class AgendamentoDeConsultaService {

	private CadastroDeMedicos medico;
	private CadastroDePaciente paciente;

	private final CadastroDePacienteRepository pacienteRepo;
	private final CadastroDeMedicosRepository medicoRepo;
	private final AgendamentoDeConsultaRepository agendaRepo;
	private final AgendamentoDeConsultasMapper mapper;

	public AgendamentoDeConsultaService(CadastroDePacienteRepository pacienteRepo,
			CadastroDeMedicosRepository medicoRepo, AgendamentoDeConsultaRepository agendaRepo,
			AgendamentoDeConsultasMapper mapper) {
		this.agendaRepo = agendaRepo;
		this.medicoRepo = medicoRepo;
		this.pacienteRepo = pacienteRepo;
		this.mapper = mapper;
	}

	public ResponseConsultaDTO validarConsulta(AgendamentoDeConsultaDTO dto) {

		if (this.verificarHorarioDeAtendimento()) {
			return new ResponseConsultaDTO(false,
					"Horario de Atendimento de Segunda a Sabado Horário 7:00 as 19:00 horas", null);
		}

		if (dto.dataDaConsulta().getDayOfWeek() == DayOfWeek.SUNDAY) {
			return new ResponseConsultaDTO(false, "Domingo não há Atendimento", null);
		}

//==============================================================		
		if (!this.medicoRepo.findById(dto.idMedico()).filter(medico -> medico.getIsInativo() == false).isPresent()) {
			return new ResponseConsultaDTO(false, "Medico Não Cadastrado", null);
		}

		if (!this.pacienteRepo.findById(dto.idPaciente()).filter(paciente -> paciente.getIsInativo() == false)
				.isPresent()) {
			return new ResponseConsultaDTO(false, "Paciente Não Cadastrado", null);
		}

		this.medico = this.medicoRepo.findById(dto.idMedico()).filter(medico -> medico.getIsInativo() == false).get();

		this.paciente = this.pacienteRepo.findById(dto.idPaciente())
				.filter(paciente -> paciente.getIsInativo() == false).get();

//==============================================================================		

		if (dto.dataDaConsulta().isEqual(LocalDate.now())) {
			if (!this.converteEmumEmHoras(dto.horario())) {
				return new ResponseConsultaDTO(false,
						"Consulta deverá ser marcada com no minimo 1 hora de Antecedencia", null);
			}
		}

		if (dto.dataDaConsulta().isAfter(LocalDate.now())) {
			if (this.verificarDisponibilidadeDeHorarioDoMedico(this.medico, dto.dataDaConsulta(), dto.horario())) {
				return new ResponseConsultaDTO(false, "Horário Indisponivel para este Medico", null);
			}

			if (this.verificarSeHaAgendamentoParaOpacienteNoMesmoHorario(paciente, dto.dataDaConsulta(),
					dto.horario())) {
				return new ResponseConsultaDTO(false, "Paciente Agendado com Outro Medico neste Horário", null);
			}
		}

		return this.agendarConsulta(dto);

	}

	private Boolean verificarDisponibilidadeDeHorarioDoMedico(CadastroDeMedicos medico, LocalDate dataDaConsulta,
			HorariosDeConsultas horario) {
		return this.agendaRepo.findByMedicoAndDataAgendadaAndHoraAgendada(medico, dataDaConsulta, horario).isPresent();
	}

	private boolean verificarSeHaAgendamentoParaOpacienteNoMesmoHorario(CadastroDePaciente paciente,
			LocalDate dataDaConsulta, HorariosDeConsultas horario) {
		return this.agendaRepo.findByPacienteAndDataAgendadaAndHoraAgendada(paciente, dataDaConsulta, horario)
				.isPresent();
	}

	private ResponseConsultaDTO agendarConsulta(AgendamentoDeConsultaDTO dto) {
		AgendamentoDeConsultas agenda = new AgendamentoDeConsultas();
		agenda.setPaciente(paciente);
		agenda.setMedico(medico);
		agenda.setDataDoAgendamento(dto.dataDoAgendamento());
		agenda.setDataAgendada(dto.dataDaConsulta());
		agenda.setHoraAgendada(dto.horario());
		try {
			agenda = this.agendaRepo.save(agenda);
			return new ResponseConsultaDTO(true, "Paciente Não Cadastrado", this.mapper.toAgendaDTO(agenda));
		} catch (Exception e) {
			throw new RecordNotFoundException(e.getMessage());
		}
	}
//=================================	

	public List<ResponseAgendaDoMedicoDTO> findByMedico(Long id) {
		CadastroDeMedicos medico = this.medicoRepo.findById(id).get();
		List<ResponseAgendaDoMedicoDTO> meusCompromissos = this.agendaRepo.findByMedico(medico).stream()
				.map(r -> this.mapper.toAgendaDTO(r)).collect(Collectors.toList());
		return meusCompromissos;
	}

	public List<ResponseAgendaDoMedicoDTO> findByMedicoAndData(Long id) {
		CadastroDeMedicos medico = this.medicoRepo.findById(id)
				.orElseThrow(() -> new RecordNotFoundException("Registro Não Encontrado"));
		List<ResponseAgendaDoMedicoDTO> meusCompromissos = this.agendaRepo
				.findByMedicoAndDataAgendadaAfter(medico, LocalDate.now()).stream().map(r -> this.mapper.toAgendaDTO(r))
				.collect(Collectors.toList());
		return meusCompromissos;
	}

	public Boolean converteEmumEmHoras(HorariosDeConsultas horaEnum) {
// Este metodo converte o enum para horas e verifica se esta hora convertida é maior ou igual a 1 hora do horario atual.
		DateTimeFormatter horarioEnum = DateTimeFormatter.ofPattern("HH:mm");
		LocalTime horario = LocalTime.parse(horaEnum.getHorario(), horarioEnum);
		if (horario.isAfter(LocalTime.now())) {
			int difHorario = horario.getHour() - LocalTime.now().getHour();
			if (difHorario >= 1) {
				return true;
			}
		}
		return false;
	}

//===========================================================================
	private boolean verificarHorarioDeAtendimento() {
		if (LocalDateTime.now(ZoneId.systemDefault()).getDayOfWeek() == DayOfWeek.SUNDAY) {
			return false;
		}

		if (LocalDateTime.now(ZoneId.systemDefault()).getHour() < 7
				|| LocalDateTime.now(ZoneId.systemDefault()).getHour() > 19) {
			return false;
		}

		return true;
	}

}
