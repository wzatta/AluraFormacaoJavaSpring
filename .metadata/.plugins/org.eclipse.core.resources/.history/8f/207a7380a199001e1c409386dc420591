package com.cilazatta.vollMed.entities;

import java.util.List;

import org.hibernate.validator.constraints.Length;

import com.cilazatta.vollMed.dto.CadastroDeMedicosAtualizaDTO;
import com.cilazatta.vollMed.enums.Especialidade;

import jakarta.persistence.Column;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@NoArgsConstructor
@Entity
@Table(name = "cadastrodemedico")
public class CadastroDeMedicos {

	@Id
	@EqualsAndHashCode.Include
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(name = "nome", nullable = false, length = 50)
	@NotBlank(message = "Preenchimento Obrigatorio")
	@Length(min = 5, max = 50)
	private String nome;

	@Column(name = "email", nullable = false, length = 50)
	@NotBlank(message = "Preenchimento Obrigatorio")
	@Email(message = "Deve ser um E-mail valido")
	private String email;

	@Column(name = "telefone", nullable = false, length = 16)
	@Length(max = 16)
	@NotBlank(message = "Preenchimento Obrigatorio")
	private String telefone;

	@Column(name = "crm", nullable = false, length = 14, unique = true)
	@NotBlank(message = "Preenchimento Obrigatorio")
	private String crm;

	@Enumerated(EnumType.STRING)
	@Column(name = "especialidade")
	private Especialidade especialidade;

	@Embedded
	private Endereco endereco;

	@Column(name = "inativo")
	@Setter(value = AccessLevel.NONE)
	private Boolean isInativo = false;

	@OneToMany
	private List<AgendamentoDeConsultas> compromissos;

	public void softDelete() {
		this.isInativo = true;
	}

//=============================================================================	
	public CadastroDeMedicos(Long id,
			@NotBlank(message = "Preenchimento Obrigatorio") @Length(min = 5, max = 50) String nome,
			@NotBlank(message = "Preenchimento Obrigatorio") @Email(message = "Deve ser um E-mail valido") String email,
			@Length(max = 16) @NotBlank(message = "Preenchimento Obrigatorio") String telefone,
			@NotBlank(message = "Preenchimento Obrigatorio") String crm, Especialidade especialidade, Endereco endereco,
			Boolean isInativo) {
		this.id = id;
		this.nome = nome;
		this.email = email;
		this.telefone = telefone;
		this.crm = crm;
		this.especialidade = especialidade;
		this.endereco = endereco;
		this.isInativo = isInativo;
	}

//=================================================================================
	public void atualizarInformacoes(CadastroDeMedicosAtualizaDTO dto) {
		if (dto.nome() != null) {
			this.setNome(dto.nome());
		}
		if (dto.telefone() != null) {
			this.setTelefone(dto.telefone());
		}
		if (dto.enderecoDto() != null) {
			this.endereco.atualizaEndereco(dto.enderecoDto());
		}

	}
//==============================================================
	
	public void setCompromissos(List<AgendamentoDeConsultas> consultas) {
		if(consultas == null) {
			throw new IllegalArgumentException("Agenda não pode ser null");
		}
		this.compromissos.clear();
		this.compromissos.addAll(consultas);
	}
	
	public void addConsulta(AgendamentoDeConsultas consulta) {
		
		if(consulta == null) {
			throw new IllegalArgumentException("Agenda não pode ser null");
		}
		
		consulta.setMedico(this);
		this.compromissos.add(consulta);
	}
	
	public void removeConsulta(AgendamentoDeConsultas consulta) {
		
		if(consulta == null) {
			throw new IllegalArgumentException("Agenda não pode ser null");
		}
		
		consulta.setMedico(null);
		this.compromissos.remove(consulta);
	}

}
