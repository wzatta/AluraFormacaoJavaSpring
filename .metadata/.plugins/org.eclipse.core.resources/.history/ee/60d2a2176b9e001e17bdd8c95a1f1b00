package com.cilazata.services;

import java.io.File;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;

import com.cilazatta.dto.BmDTO;
import com.cilazatta.dto.BmRequestFornecDTO;
import com.cilazatta.dto.FornecedorDTO;
import com.cilazatta.dto.PeriodoMedicaoDTO;
import com.cilazatta.dto.mapper.BmMapper;
import com.cilazatta.entity.Bm;
import com.cilazatta.entity.Fornecedor;
import com.cilazatta.entity.PeriodoMedicao;
import com.cilazatta.repositories.BmRepository;
import com.cilazatta.services.calcbm.GeraBMFornecedorService;
import com.cilazatta.services.exeptions.ObjectNotFoundException;

@Service
@Validated
public class BmService {

	private final GeraBMFornecedorService geraBmForService;
	private final BmRepository bmRepo;
	private final BmMapper bmMapper;
	private final PreencherBmExcel preencher;
	private final PreencherBmExcel_modelo_01 preencher1;
	
	@Autowired
	private ProdutoTabelaLocadoService prodLocServ;
	
	@Autowired
	private PeriodoMedicaoService periodoMedicaoServ;
	
	public BmService(GeraBMFornecedorService geraBmForService, BmRepository bmRepo, BmMapper bmMapper,
			PreencherBmExcel preencher, PreencherBmExcel_modelo_01 preencher1) {
		this.geraBmForService = geraBmForService;
		this.bmRepo = bmRepo;
		this.bmMapper = bmMapper;
		this.preencher = preencher;
		this.preencher1 = preencher1;
		
	}
	
//Lista para popular o Select dos fornecedores que tem produtos locados
	public List<FornecedorDTO> findFornecedorProdutoLocado(){
		return this.prodLocServ.findAllForn();
	}

//Lista para popular o Select dos periodos em Aberto para Gerar os BM's
	public List<PeriodoMedicaoDTO> finPeriodoAbertoParaGerarBm(FornecedorDTO dto) {
		LocalDate dateLocInicial = this.prodLocServ.findFirstDateLoc(dto);
		List<PeriodoMedicaoDTO> listPeriodo = this.periodoMedicaoServ.findPeriodoFornec(dateLocInicial);
		List<PeriodoMedicaoDTO> listBmPeriodo = this.findPeriodoPorFornecedor(dto);
		List<PeriodoMedicaoDTO> listaPeriodoAberto = listPeriodo.stream()
				.filter(r-> !listBmPeriodo.contains(r))
				.collect(Collectors.toList());
		return listaPeriodoAberto;
	}	
	
	
	public List<BmDTO> createBmFornec(BmRequestFornecDTO bmDto) {

	List<BmDTO> listaBmdto =	this.geraBmForService.GeraBmPorFornecedor(bmDto);
	return listaBmdto;
	}
	
//retorna uma lista com todos os BM's gerado
	public List<BmDTO> findAll(){
		List<Bm> listaBm = this.bmRepo.findAll();
		List<BmDTO> listDto = listaBm
				.stream()
				.map(bm -> bmMapper.toDTO(bm))
				.collect(Collectors.toList());
		return listDto;
	}
	
	public BmDTO findById(Long id) {
		Optional<Bm> optionalObj = bmRepo.findById(id);
		Bm bm = optionalObj.orElseThrow(()-> new ObjectNotFoundException("Registro NÃ£o Encontrado"));
		BmDTO bmDto = bmMapper.toDTO(bm);
		return bmDto;
	}
	
//Lista com todos os fornecedores que tem BM Gerado 	
	public List<FornecedorDTO> findFornBm(){
		List<FornecedorDTO> listForBmDto = bmRepo.findAll()
				.stream()
				.map(bm-> bm.getFornecedor().convert())
				.distinct()
				.collect(Collectors.toList());
		return listForBmDto;
	}
	
//Lista com todos os BM de um Determinado fornecedor	
	public List<BmDTO>  findBmPorFornecedor(FornecedorDTO dto) {
		Fornecedor fornecedor = dto.convert();
		List<Bm> listBmporFornecedor = bmRepo.searchP(fornecedor.getRazaosocial().trim());
		List<BmDTO> listaBmDto = listBmporFornecedor
				.stream()
				.map(bm -> bmMapper.toDTO(bm))
				.collect(Collectors.toList());
		return listaBmDto;
	}

//lista com todos os Periodos de BM gerados para determinado fornecedor	
	public List<PeriodoMedicaoDTO> findPeriodoPorFornecedor(FornecedorDTO dto) {
		Fornecedor fornecedor = dto.convert();
		List<Bm> listBmporFornecedor = bmRepo.searchP(fornecedor.getRazaosocial().trim());
		List<PeriodoMedicaoDTO> ListaPeriodoDto = listBmporFornecedor
				.stream()
				.map(periodo-> periodo.getPermed().convert())
				.distinct()
				.collect(Collectors.toList());
		
		return ListaPeriodoDto;
	}

//lista cdos BM's gerados para um determinado Fornecedor e determinado periodo	
	public List<BmDTO> findBmFornPeriodo(FornecedorDTO dto, PeriodoMedicaoDTO perdto) {
		Fornecedor fornecedor = dto.convert();
		PeriodoMedicao permed = perdto.convert();
		List<Bm> listBmporFornecedorPeriodo = bmRepo.searchFornecedorPeriodo(fornecedor.getRazaosocial().trim(), 
				permed.getCodper().trim());
		List<BmDTO> listaBmDto = listBmporFornecedorPeriodo
				.stream()
				.map(bm -> bmMapper.toDTO(bm))
				.collect(Collectors.toList());
		return listaBmDto;
		
	}
	
	public void imprimirBm(Long id) {
		BmDTO bm = this.findById(id);
		File arquivoExcel = this.preencher.capturarArquivo();
		this.preencher.imprimirBm(arquivoExcel, bm);
			}

	public void imprimirBm2(Long id) {
		BmDTO bm = this.findById(id);
		File arquivoExcel = this.preencher1.capturarArquivo();
		this.preencher1.imprimirBm(arquivoExcel, bm);
	}

}
